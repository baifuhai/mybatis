1. eclipse引入xml dtd文件
	window - preferences - xml - xml catalog - add - catalog entry - location - key type (uri) - key (input url)

    在 mybatis jar 包里
    org/apache/ibatis/builder/xml/mybatis-3-config.dtd
    org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd

    org.apache.ibatis.builder.xml.XMLMapperEntityResolver 里有上述两个路径

================================= 参数处理 =================================

单个参数：
	mybatis 不会做特殊处理，随便写

多个参数：
	mybatis 会做特殊处理
	多个参数会被封装成一个map
		key：param1 ~ paramN，或参数的索引0 ~ N（高版本变了，arg0 ~ argN）
		value：参数值
	#{}就是从 map 中取值

	操作：
		方法：Emp getByIdAndLastName(Integer id, String lastName);
		取值：#{id}, #{lastName}

	异常：
		org.apache.ibatis.binding.BindingException:
		Parameter 'id' not found.
		Available parameters are [0, 1, 2, param1, param2, param3]（低版本）
		Available parameters are [arg0, arg1, arg2, param1, param2, param3]（高版本）

命名参数：
	明确指定封装参数时 map 的 key
	Emp getByIdAndLastName(@Param("id") Integer id, @Param("lastName") String lastName);

POJO：
	如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo
	#{属性名}：取出传入的pojo的属性值

Map：
	如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map
	#{key}：取出map中对应的值

TO（Transfer Object）：
	如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO数据传输对象
	class Page {
		int index;
		int size;
	}

无注解（useActualParamName=false）：Emp get(Integer id, String name)	-> [0, 1, param1, param2]
无注解（useActualParamName=true）：Emp get(Integer id, String name)	-> [arg0, arg1, param1, param2]
有注解：Emp get(@Param("id") Integer id, String name)				-> [id, arg1, param1, param2]
param1 ~ paramN 一定有，如果加了@Param注解，则把0或arg0替换

特别注意：如果是Collection（List、Set）类型或者是数组，也会特殊处理，也会封装在map中
			Collection	collection
			List		collection/list
			数组			array
Emp getEmpById(List<Integer> ids);
	取值：取出第一个id的值：#{list[0]}，也可以用命名参数，如果有注解

处理参数的代码在 ParamNameResolver.getNamedParams 里

================================= 参数值的获取 =================================

#{}：是以预编译的形式，将参数设置到sql语句中，PreparedStatement，防止sql注入
${}：取出的值直接拼装在sql语句中，会有安全问题
大多情况下，我们取参数的值都应该去使用#{}

原生 jdbc 不支持占位符的地方我们就只能用${}

#{}更丰富的用法：
	规定参数的一些规则：
	javaType、jdbcType、mode（存储过程）、numericScale
	resultMap、typeHandler、jdbcTypeName、expression（未来准备支持的功能）

	jdbcType 通常需要在某种特定的条件下被设置：
    在我们数据为 null 的时候，有些数据库可能不能识别 mybatis 对 null 的默认处理
    mybatis 对 null 映射的是原生 Jdbc 的 OTHER 类型，oracle 不能正确处理

    org.apache.ibatis.type.JdbcType
    java.sql.JDBCType
    java.sql.Types

    由于全局配置中：jdbcTypeForNull=OTHER，oracle 不支持，两种办法
    1、#{email, jdbcType=NULL}
    2、jdbcTypeForNull=NULL
        <setting name="jdbcTypeForNull" value="NULL"/>
